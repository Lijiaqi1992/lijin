<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lijiaqi.lijin.dao.LjOutMoneyPOMapper">
  <resultMap id="BaseResultMap" type="com.lijiaqi.lijin.po.LjOutMoneyPO">
    <id column="out_id" jdbcType="INTEGER" property="outId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="out_money" jdbcType="DOUBLE" property="outMoney" />
    <result column="out_date" jdbcType="TIMESTAMP" property="outDate" />
    <result column="in_id" jdbcType="INTEGER" property="inId" />
    <result column="note" jdbcType="VARCHAR" property="note" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    out_id, user_id, name, reason, out_money, out_date, in_id, note, create_date
  </sql>
  <select id="selectByExample" parameterType="com.lijiaqi.lijin.po.LjOutMoneyPOCriterion" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from lj_out_money
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from lj_out_money
    where out_id = #{outId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from lj_out_money
    where out_id = #{outId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lijiaqi.lijin.po.LjOutMoneyPO"  useGeneratedKeys = "true" keyProperty = "outId">
    insert into lj_out_money (out_id, user_id, name,
      reason, out_money, out_date,
      in_id, note, create_date
      )
    values (#{outId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
      #{reason,jdbcType=VARCHAR}, #{outMoney,jdbcType=DOUBLE}, #{outDate,jdbcType=TIMESTAMP},
      #{inId,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lijiaqi.lijin.po.LjOutMoneyPO">
    insert into lj_out_money
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="outId != null">
        out_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="outMoney != null">
        out_money,
      </if>
      <if test="outDate != null">
        out_date,
      </if>
      <if test="inId != null">
        in_id,
      </if>
      <if test="note != null">
        note,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="outId != null">
        #{outId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="outMoney != null">
        #{outMoney,jdbcType=DOUBLE},
      </if>
      <if test="outDate != null">
        #{outDate,jdbcType=TIMESTAMP},
      </if>
      <if test="inId != null">
        #{inId,jdbcType=INTEGER},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lijiaqi.lijin.po.LjOutMoneyPOCriterion" resultType="java.lang.Long">
    select count(*) from lj_out_money
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update lj_out_money
    <set>
      <if test="record.outId != null">
        out_id = #{record.outId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.reason != null">
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.outMoney != null">
        out_money = #{record.outMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.outDate != null">
        out_date = #{record.outDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.inId != null">
        in_id = #{record.inId,jdbcType=INTEGER},
      </if>
      <if test="record.note != null">
        note = #{record.note,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update lj_out_money
    set out_id = #{record.outId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      reason = #{record.reason,jdbcType=VARCHAR},
      out_money = #{record.outMoney,jdbcType=DOUBLE},
      out_date = #{record.outDate,jdbcType=TIMESTAMP},
      in_id = #{record.inId,jdbcType=INTEGER},
      note = #{record.note,jdbcType=VARCHAR},
      create_date = #{record.createDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lijiaqi.lijin.po.LjOutMoneyPO">
    update lj_out_money
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="outMoney != null">
        out_money = #{outMoney,jdbcType=DOUBLE},
      </if>
      <if test="outDate != null">
        out_date = #{outDate,jdbcType=TIMESTAMP},
      </if>
      <if test="inId != null">
        in_id = #{inId,jdbcType=INTEGER},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where out_id = #{outId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lijiaqi.lijin.po.LjOutMoneyPO">
    update lj_out_money
    set user_id = #{userId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      reason = #{reason,jdbcType=VARCHAR},
      out_money = #{outMoney,jdbcType=DOUBLE},
      out_date = #{outDate,jdbcType=TIMESTAMP},
      in_id = #{inId,jdbcType=INTEGER},
      note = #{note,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP}
    where out_id = #{outId,jdbcType=INTEGER}
  </update>
</mapper>
